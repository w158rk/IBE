#include <user.hpp>
#include <iostream>
#include <config.h>

extern "C" {
	#include <crypto.h>
	#include <string.h>
	#include <sys.h>
	#include<utils.h>
}

using namespace user;

void User::run_get_signdata(char *server_ip, 
							int server_port,
							ID *server_id)
{
    if(server_id == nullptr) {
		server_id = get_id()->father_node;
	}

    /* connect to the server first */
	interface::IComm *comm = get_comm_ptr();
	comm->connect_to_server(server_ip, server_port);

    /* run a listening thread for the connection */
	 try
	 {
		// get the files from the comm object
		interface::IComm::file_main(this, comm->get_read_file(), 
									comm->get_write_file());
	 }
	 catch(const std::exception& e)
	 {
	 	std::cerr << e.what() << '\n';
	 	throw e;
	 }

	char *id = get_id()->id;
	size_t id_len = get_id()->length;
    size_t mpk_len = get_mpk_len();
	size_t m_len = (size_t)(id_len + mpk_len);      //calculate length
	char *payload = (char *)std::malloc(m_len);

    AppPacket *p_app_packet = new AppPacket; 
	
	/* set the head */
	p_app_packet->set_type(SIGN_REQUEST_TYPE);
	p_app_packet->set_length(m_len);

    IBEPublicParameters mpk = NULL;
    get_mpk_fp(get_mpk_filename(), &mpk);

    memcpy(payload, mpk, mpk_len);
    memcpy(payload + mpk_len, id, id_len);
    p_app_packet->set_payload (payload);

    PacketCTX *ctx = new PacketCTX;
	// NOTE : It is the responsibility of packet class to 
	// free every packet-ctx generated by any module

	ctx->set_phase (SEND_APP_PACKET);
	ctx->set_payload_app (p_app_packet);

	ctx->set_dest_id (server_id);

	if(0 == get_packet_ptr()->packet_send(ctx)) {
		throw UserException("wrong when make the packet to send");
	}
}